apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.google.firebase.crashlytics'

def keystorePropertiesFile = rootProject.file('key.properties')
def keys = new Properties()
keys.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        debug {  // common signing key for debug builds for cross-computer work
            keyAlias 'debug'
            keyPassword 'debugkey'
            storeFile file('../.debug.jks')
            storePassword 'debugkey'
        }
        release {  // release signing key stored as environment variable for circle builds
            keyAlias keys['keyAlias']
            keyPassword keys['keyPassword']
            storeFile file(keys['storeFile'])
            storePassword keys['storePassword']
        }
    }

    compileSdkVersion 29
    testOptions.unitTests.includeAndroidResources = true

    defaultConfig {
        applicationId 'com.mononz.skeleton'
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName '1.0.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
        vectorDrawables.useSupportLibrary = true
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-debug.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-test.pro'
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            FirebasePerformance {
                instrumentationEnabled false
            }
        }
        release {
            debuggable false
            signingConfig signingConfigs.release
            shrinkResources false
            minifyEnabled true  // De-obfuscation mapping file located at app/build/outputs/mapping/release/
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-test.pro'
        }
    }

    buildFeatures {
        dataBinding = true
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    flavorDimensions 'mononz'

    productFlavors {
        dev {
            dimension 'mononz'
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
            resConfigs 'en'
            buildConfigField 'String', 'API_PATH', '"https://skeleton.mononz.com/api/"'
            resValue "string", "testValue",          keys['testValue']
            manifestPlaceholders = [
                    hostName: 'skeleton.mononz.com']
        }
        stag {
            dimension 'mononz'
            applicationIdSuffix '.beta'
            buildConfigField 'String', 'API_PATH', '"https://skeleton.mononz.com/api/"'
            resValue "string", "testValue",          keys['testValue']
            manifestPlaceholders = [
                    hostName: 'skeleton.mononz.com']
        }
        prod {
            dimension 'mononz'
            buildConfigField 'String', 'API_PATH', '"https://skeleton.mononz.com/api/"'
            resValue "string", "testValue",          keys['testValue']
            manifestPlaceholders = [
                    hostName: 'skeleton.mononz.com']
        }
    }

    if (project.hasProperty('devBuild')) {
        splits.abi.enable = false
        splits.density.enable = false
        aaptOptions.cruncherEnabled = false
    }

    testOptions.unitTests{
        includeAndroidResources = true
        all {  // Always show the result of every unit test, even if it passes.
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

task outdated {
    group = 'mononz'
    dependsOn 'dependencyUpdates'
}

tasks.whenTaskAdded {task ->
    if(task.name.contains("DebugDexMethods")) {
        task.enabled = false
    }
}

dependencies {

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Kotlin Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7'

    // Development/Staging only dependencies
    devImplementation 'com.facebook.stetho:stetho:1.5.1'                                            // https://github.com/facebook/stetho/releases
    devImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.7.2'
    implementation 'com.jakewharton.timber:timber:4.7.1'                                            // https://github.com/JakeWharton/timber/releases


    // Google
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.google.android.gms:play-services-base:17.2.1'

    // AndroidX
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.fragment:fragment-ktx:1.2.4'
    implementation 'androidx.navigation:navigation-fragment:2.2.2'
    implementation 'androidx.navigation:navigation-ui:2.2.2'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.2'

    // Firebase
    implementation 'com.google.firebase:firebase-analytics-ktx:17.4.3'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0'

    // Lifecycles, Livedata, ViewModel
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.0-alpha03'                        // https://developer.android.com/topic/libraries/architecture/adding-components.html
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // Injection
    implementation 'com.google.dagger:dagger:2.28'                                                  // https://github.com/google/dagger/releases
    kapt 'com.google.dagger:dagger-compiler:2.28'
    implementation 'com.google.dagger:dagger-android:2.28'
    implementation 'com.google.dagger:dagger-android-support:2.28'
    kapt 'com.google.dagger:dagger-android-processor:2.28'

    // Network
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'                                          // https://github.com/square/retrofit/releases
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'

    // fragment testing
    debugImplementation 'androidx.fragment:fragment-testing:1.3.0-alpha05'

    // Unit Test
    testImplementation 'junit:junit:4.13'

    // Instrumented Test
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

apply plugin: 'com.google.gms.google-services'